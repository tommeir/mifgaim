<?php
// $Id: password_change.test,v 1.1 2009/12/14 05:38:03 davereid Exp $

/**
 * @file
 * Unit tests for the password_change module.
 *
 * @todo Add confirm on add user page?
 */

class PasswordChangeTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Password change confirm',
      'description' => 'Functional tests for the password change confirm module.',
      'group' => 'Password change confirm'
    );
  }

  function setUp() {
    parent::setUp('password_change');
    $this->account = $this->drupalCreateUser(array('access content', 'administer users'));
  }

  function testPasswordConfirm() {
    $this->drupalPost('user/password', array('name' => $this->account->name), t('E-mail new password'));

    // Check that the password reset mail was sent and grab the link.
    $this->assertMail('id', 'user_password_reset', 'Reset password mail sent.');
    $mail = end($this->drupalGetMails());
    if (!preg_match('%user/reset/[\w/]+%', $mail['body'], $regs)) {
      return $this->fail('Reset password link not found.');
    }
    $login_link = $regs[0];

    // Sleep for one second to ensure the timestamp checking works.
    sleep(1);

    $this->drupalGet($login_link);
    $this->assertText('This is a one-time login for ' . $this->account->name);
    $this->drupalPost(NULL, array(), t('Log in'));
    $this->assertText('You have just used your one-time login link.');
    $this->assertPasswordRequired();
    $this->assertNoPasswordConfirm();

    $this->drupalPost(NULL, array('pass[pass1]' => 'password', 'pass[pass2]' => 'password'), t('Save'));
    $this->assertText('The changes have been saved.');
    $this->assertPasswordNotRequired();
    $this->assertPasswordConfirm();

    $this->drupalPost(NULL, array(), t('Save'));
    $this->assertText('Your current password field is required.');

    $this->drupalPost(NULL, array('pass_current' => 'incorrect'), t('Save'));
    $this->assertText('Incorrect current password.');

    $this->drupalPost(NULL, array('pass[pass1]' => 'new', 'pass[pass2]' => 'new', 'pass_current' => 'password'), t('Save'));
    $this->assertText('The changes have been saved.');

    $this->drupalPost(NULL, array('pass_current' => 'password'), t('Save'));
    $this->assertText('Incorrect current password.');

    $this->drupalPost(NULL, array('pass_current' => 'new'), t('Save'));
    $this->assertText('The changes have been saved.');
  }

  function testNotSameAccount() {
    $this->drupalLogin($this->account);
    $other_user = $this->drupalCreateUser(array('access content'));

    $this->drupalGet('user/' . $this->account->uid . '/edit');
    $this->assertPasswordConfirm();

    $this->drupalGet('user/' . $other_user->uid . '/edit');
    $this->assertNoPasswordConfirm();

    $this->drupalPost('admin/user/settings', array('password_change_all' => 1), t('Save configuration'));
    $this->assertText('The configuration options have been saved.');

    $this->drupalGet('user/' . $this->account->uid . '/edit');
    $this->assertPasswordConfirm();

    $this->drupalGet('user/' . $other_user->uid . '/edit');
    $this->assertPasswordConfirm();

    $this->drupalPost(NULL, array(), t('Save'));
    $this->assertText('Your current password field is required.');

    $this->drupalPost(NULL, array('pass_current' => 'incorrect'), t('Save'));
    $this->assertText('Incorrect current password.');

    $this->drupalPost(NULL, array('pass_current' => $this->account->pass_raw), t('Save'));
    $this->assertText('The changes have been saved.');
  }

  private function assertPasswordRequired() {
    return $this->assertFieldByXPath('//input[@type="password"][@name="pass[pass1]"][contains(@class,"required")]', '', 'Password field was found and required.');
  }

  private function assertPasswordNotRequired() {
    $this->assertFieldByName('pass[pass1]', '', 'Password field found.');
    $this->assertNoFieldByXPath('//input[@type="password"][@name="pass[pass1]"][contains(@class,"required")]', '', 'Password field was not required.');
  }

  private function assertPasswordConfirm() {
    return $this->assertFieldByXPath('//input[@type="password"][@name="pass_current"][contains(@class,"required")]', '', 'Confirm password field found and required.');
  }

  private function assertNoPasswordConfirm() {
    return $this->assertNoFieldByName('pass_current', '', 'Confirm password field not found');
  }
}
