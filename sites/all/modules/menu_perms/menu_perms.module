<?php
// $Id: menu_perms.module,v 1.3 2010/03/26 12:03:52 skilip Exp $

/**
 * @file
 * Control access on a per menu base
 */

/**
 * Implementation of hook_perm().
 */
function menu_perms_perm() {
  $result = db_query("SELECT menu_name FROM {menu_custom}");
  $perms = array();
  while ($menu = db_fetch_object($result)) {
    $perms[] = "administer $menu->menu_name";
  }
  return $perms;
}

/**
 * Access callback for menu admin pages.
 */
function menu_perms_access($path = NULL) {
  // The user should at least have permissions to administer menu's
  if (!user_access('administer menu')) {
    return FALSE;
  }

  if ($path && $path == 'admin/build/menu') {
    foreach (menu_perms_perm() as $perm) {
      if (user_access($perm)) {
        return TRUE;
      }
    }
    return FALSE;
  }
  return user_access('administer '. arg(3));
}

/**
 * Implementation of hook_menu_alter().
 */
function menu_perms_menu_alter(&$items) {
  $items['admin/build/menu']['page callback']  = 'menu_perms_menu_overview_page';
  $items['admin/build/menu']['access callback']  = 'menu_perms_access';
  $items['admin/build/menu']['access arguments']  = array('admin/build/menu');
  $items['admin/build/menu-customize/%menu']['access callback']  = 'menu_perms_access';
  $items['admin/build/menu-customize/%menu/add']['access callback']  = 'menu_perms_access';
  $items['admin/build/menu-customize/%menu/edit']['access callback']  = 'menu_perms_access';
  $items['admin/build/menu-customize/%menu/delete']['access callback']  = 'menu_perms_access';
}

/**
 * Implementation of hook_form_alter().
 */
function menu_perms_form_alter(&$form, $form_state, $form_id) {
  // Check if form has menu parent #options. This means the form has the option to hang menu item under a menu.
  if ($form['menu']['parent']['#options']) {

    // Set all menu items under $items.
    $items = $form['menu']['parent']['#options'];

    // Get menu names
    $result = db_query("SELECT * FROM {menu_custom} ORDER BY title");
    while ($menu = db_fetch_array($result)) {

      // Check if user has no permission to menu
      if (!user_access('administer '. $menu['menu_name'])) {

        // Set name of menu in variable permission denied. Set string length in string_length
        $permission_denied = $menu['menu_name'];
        $string_length = drupal_strlen($menu['menu_name']);

        // Walk through all items to unset the items which have no permission.
        foreach ($items as $items_key => $items_variable) {

          // Check substring of key, String_length is used so semi-duplicate names can be used without problems. (e.g. primary-links - primary-links-extra.)
          // If substring is equal to permission_denied then the item is a menu item which has no permission and will be unset.
          if (drupal_substr($items_key, 0, $string_length) == $permission_denied) {
            unset($items[$items_key]);
          }
        }
      }
    }
    $form['menu']['parent']['#options'] = $items;
  }
}

/**
 * Menu callback which shows an overview page of all the custom menus and their descriptions.
 */
function menu_perms_menu_overview_page() {
  $result = db_query("SELECT * FROM {menu_custom} ORDER BY title");
  $content = array();
  while ($menu = db_fetch_array($result)) {
    if (user_access('administer '. $menu['menu_name'])) {
      $menu['href'] = 'admin/build/menu-customize/'. $menu['menu_name'];
      $menu['localized_options'] = array();
      $menu['description'] = filter_xss_admin($menu['description']);
      $content[] = $menu;
    }
  }
  return theme('admin_block_content', $content);
}
